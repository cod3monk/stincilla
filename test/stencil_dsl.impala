// DSL implementation

fn range(lower: i32, upper: i32, body: fn(i32, fn())) -> () {
    if lower < upper {
        body(lower);
        range(lower+1, upper, body, return)
    }
}

fn apply_stencil(x: i32, y: i32, arr: Accessor, stencil: [f32 * 3]) -> f32 {
    let mut sum = 0.0f;
    let size = 1;
    for i in range(-size, size+1) {
        sum += stencil(i + size) * arr.read(x + i, y);
    }
    sum
}

fn apply_bh(mut index: i32,
            bh_lower: fn(i32, i32) -> i32, bh_upper: fn(i32, i32) -> i32,
            lb: i32, ub: i32) -> i32 {
    if index  < lb { index = bh_lower(index, lb); }
    if index >= ub { index = bh_upper(index, ub); }
    index
}

fn get_elem(dev: i32, fld: Array, idx: i32) -> f32 { bitcast[&[f32]](fld.get(dev).data)(idx) }
fn set_elem(dev: i32, fld: Array, idx: i32, val: f32) -> () { let mut ptr = bitcast[&[f32]](fld.get(dev).data); ptr(idx) = val }
fn iterate_field(dev: i32, out: Array, arr: Array, stencil: [f32 * 3],
                 bh_lower: fn(i32, i32) -> i32, bh_upper: fn(i32, i32) -> i32,
                 body: fn(i32, i32, Accessor, Accessor, [f32 * 3]) -> ()) -> () {
    let size = 1;
    let lb = [0,    size,            out.cols() - size];
    let ub = [size, out.cols() - size, out.cols()];
    let out_acc = Accessor {
        cols  : || out.cols(), rows : || out.rows(),
        read  : |x, y|    { get_elem(dev, out, y*out.cols() + x) },
        write : |x, y, v| { set_elem(dev, out, y*out.cols() + x, v) }
    };

    for y in $range(0, out.rows()) {
        for region in @range(0, 3) {
            let arr_acc = Accessor {
                cols  : || arr.cols(), rows : || arr.rows(),
                read  : |x, y|    { get_elem(dev, arr, y*arr.cols() + apply_bh(x, bh_lower, bh_upper, 0, arr.cols())) },
                write : |x, y, v| { set_elem(dev, arr, y*arr.cols() + x, v) }
            };

            for x in $range(lb(region), ub(region)) @{
                body(x, y, out_acc, arr_acc, stencil);
            }
        }
    }
}


// DSL code

struct Field {
    cpu    : Buffer,
    acc    : Buffer,
    cols   : i32,
    rows   : i32,
    stride : i32,
    on     : i32,
}

struct Array {
    set    : fn(i32, Buffer) -> (),
    get    : fn(i32) -> Buffer,
    cols   : fn() -> i32,
    rows   : fn() -> i32,
    stride : fn() -> i32,
}

struct Accessor {
    cols  : fn() -> i32,
    rows  : fn() -> i32,
    read  : fn(i32, i32) -> f32,
    write : fn(i32, i32, f32) -> (),
}

fn create_array(mut fld: Field) -> Array {
    Array {
        set : |dev: i32, buf: Buffer| -> () {
            if dev == 0 {
                thorin_copy(thorin_device(0, 0), buf.data as &i8, 0i64, thorin_device(0, 0), fld.cpu.data as &i8, 0i64, (fld.cols * fld.rows * 4) as i64);
                fld.on = 0
            } else {
                thorin_copy(thorin_device(1, 0), buf.data as &i8, 0i64, thorin_device(1, 0), fld.acc.data as &i8, 0i64, (fld.cols * fld.rows * 4) as i64);
                fld.on = 1
            }
        },
        get : |dev: i32| -> Buffer {
            if dev != fld.on {
                if dev == 0 {
                    thorin_copy(thorin_device(1, 0), fld.acc.data as &i8, 0i64, thorin_device(0, 0), fld.cpu.data as &i8, 0i64, (fld.cols * fld.rows * 4) as i64);
                } else {
                    thorin_copy(thorin_device(0, 0), fld.cpu.data as &i8, 0i64, thorin_device(1, 0), fld.acc.data as &i8, 0i64, (fld.cols * fld.rows * 4) as i64);
                }
            }
            if dev == 0 { fld.on = 0; fld.cpu } else { fld.on = 1; fld.acc }
        },
        cols: || fld.cols,
        rows: || fld.rows,
        stride: || fld.stride,
    }
}

fn clamp_lower(index: i32, lower: i32) -> i32 {
    if index < lower { lower } else { index }
}

fn clamp_upper(index: i32, upper: i32) -> i32 {
    if index >= upper { upper - 1 } else { index }
}

fn main(dev: i32) -> i32 {
    let width   = 2048;
    let height  = 2048;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let num_it  = 100;
    let arr_fld = Field { cpu : alloc_host(width * height * sizeof[f32]()), acc : alloc_host(width * height * 4), cols : width, rows : height, stride : width, on : dev };
    let out_fld = Field { cpu : alloc_host(width * height * sizeof[f32]()), acc : alloc_host(width * height * 4), cols : width, rows : height, stride : width, on : dev };
    let arr     = create_array(arr_fld);
    let out     = create_array(out_fld);
    let stencil = [b, a, b];

    for iter in range(0, num_it) {
        for x, y, out_acc, arr_acc, stencil in @iterate_field(dev, out, arr, stencil, clamp_lower, clamp_upper) {
            let val = apply_stencil(x, y, arr_acc, stencil);
            out_acc.write(x, y, val);
        }

        let tmp = arr.get(0);
        arr.set(0, out.get(0));
        out.set(0, tmp);
    }

    // do something with the result as test
    let mut sum = 0.0f;
    for i in range(0, width*height) {
        sum += bitcast[&[f32]](out.get(dev).data)(i)
    }

    release(arr.get(0));
    release(arr.get(1));
    release(out.get(0));
    release(out.get(1));

    if sum > -1.0f && sum < 1.0f { 0 } else { 1 }
}
